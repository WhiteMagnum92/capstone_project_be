package com.capstone_be.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.capstone_be.entities.Personaggio;
import com.capstone_be.entities.User;
import com.capstone_be.services.PersonaggioService;
import com.capstone_be.services.UserService;

@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("api/user")
public class UserController {

	@Autowired
	UserService userService;
	@Autowired
	PersonaggioService personaggioService;
	
	//prendere i personaggi da username
	@GetMapping("/personaggi/{username}")
	@PreAuthorize("hasRole('ADMIN')or hasRole('USER')")
	public ResponseEntity<List<Personaggio>> getPersonaggiUser(@PathVariable String username) {

		Optional<User> utentePreso = userService.cercaTramiteNome(username);
		List<Personaggio> personaggiPresi = personaggioService.findByUser(utentePreso);

		return new ResponseEntity<>(personaggiPresi, HttpStatus.OK);
	}
	
	//cerca per username
	@GetMapping("/username/{username}")
    @PreAuthorize("hasRole('ADMIN')or hasRole('USER')")
    public ResponseEntity<Optional<User>> getUserbyUsername(@PathVariable String username){
    	return new ResponseEntity<>(userService.cercaTramiteNome(username),HttpStatus.OK);
    }
	
	//delete
    @DeleteMapping ("/delete/{id}")
    @PreAuthorize("hasRole('ADMIN')or hasRole('USER')")
    public ResponseEntity<User> deleteUtente(@PathVariable long id){

        
        return new ResponseEntity<>(userService.deleteById(id), HttpStatus.OK);}
    
 // delete una personaggio tramite id utente e nome personaggio
    @DeleteMapping("/{userId}/delete/schede/{schedaId}")
    @PreAuthorize("hasRole('ADMIN')or hasRole('USER')")
    public ResponseEntity<?> deleteScheda(@PathVariable("userId") Long userId, @PathVariable("personaggio") Long schedaId) {
    	personaggioService.deleteScheda(schedaId, userId);
        return ResponseEntity.ok().build();
    }
}
